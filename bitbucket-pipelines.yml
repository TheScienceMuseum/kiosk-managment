image: php:7.2-fpm
definitions:
  caches:
    vendor: ./vendor

  setup-test-environment: &setup-test-environment
    name: setup testing environment
    caches:
    - composer
    - vendor
    script:
    - apt-get update && apt-get install -qy git curl unzip
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - ln -f -s .env.pipelines .env
    - ./composer.phar install --ignore-platform-reqs

  unit-tests: &unit-tests
    name: unit-tests
    caches:
    - composer
    - vendor
    script:
    - ln -f -s .env.pipelines .env
    - ./vendor/bin/phpunit --filter Unit --log-junit ./test-reports/junit.xml
    artifacts:
    - test-reports/*.xml

  feature-tests: &feature-tests
    name: feature-tests
    caches:
    - composer
    - vendor
    script:
    - apt-get update && apt-get install -qy git
    - ln -f -s .env.pipelines .env
    - ./vendor/bin/phpunit --filter Feature --log-junit ./test-reports/junit.xml
    artifacts:
    - test-reports/*.xml

  browser-tests: &browser-tests
    name: browser-tests
    caches:
    - composer
    - vendor
    script:
    - apt-get update && apt-get install -qy git curl unzip chromium-driver libpng-dev
    - docker-php-ext-install gd
    - ln -f -s .env.dusk.local .env
    - touch ./database/database.sqlite
    - php artisan serve > /dev/null &
    - php artisan dusk --log-junit ./test-reports/junit.xml
    artifacts:
    - tests/Browser/screenshots/*.png
    - test-reports/*.xml

pipelines:
  default:
  - step: *setup-test-environment
  - parallel:
    - step: *unit-tests
    - step: *feature-tests
    - step: *browser-tests

  branches:
    develop:
    - step: *setup-test-environment
    - parallel:
      - step: *unit-tests
      - step: *feature-tests
      - step: *browser-tests
    - step:
        name: deploy to staging
        deployment: staging
        image: atlassian/pipelines-awscli
        script:
        - aws deploy push --application-name $APPLICATION_NAME --s3-location s3://$S3_BUCKET/$BITBUCKET_COMMIT
        - aws deploy create-deployment --application-name $APPLICATION_NAME --s3-location bucket=$S3_BUCKET,key=$BITBUCKET_COMMIT,bundleType=zip --deployment-group-name="Staging"

    master:
    - step: *setup-test-environment
    - parallel:
      - step: *unit-tests
      - step: *feature-tests
      - step: *browser-tests
    - step:
        name: deploy to production
        deployment: production
        trigger: manual
        image: atlassian/pipelines-awscli
        script:
        - aws deploy push --application-name $APPLICATION_NAME --s3-location s3://$S3_BUCKET/$BITBUCKET_COMMIT
        - aws deploy create-deployment --application-name $APPLICATION_NAME --s3-location bucket=$S3_BUCKET,key=$BITBUCKET_COMMIT,bundleType=zip --deployment-group-name="Production"
